#Imported modules####################
from tkinter import *
from tkinter import ttk
import random
import time
import datetime
import tkinter.messagebox
from tkinter import messagebox
import tempfile
import os
import winsound
frequency = 2500  # Set Frequency To 2500 Hertz
duration = 1000  # Set Duration To 1000 ms == 1 second
winsound.Beep(frequency, duration)

#Defined class and variable########################
class Questions:
    def __init__(self,root):
        self.root = root
        self.root.title("Question Paper Generator")
        self.root.geometry("1350x750")

        iDate = StringVar()
        iDate.set(time.strftime("%d/%m/%y"))

        var1 = StringVar()

        ID = StringVar()
        Question = StringVar()
        Difficulty = StringVar()
        Marks = StringVar()
        Date = StringVar()
        question2 = StringVar()

#Defined function #########################
        def iExit():
            iExit = tkinter.messagebox.askyesno("Question paper generator","Confirm you want to exit?")
            if iExit>0:
                root.destroy()
                return

        def iPrint():
            q = self.txtOutput.get("1.0","end-1c")
            filename = tempfile.mktemp(".txt")
            open(filename,"w").write(q)
            os.startfile(filename,"print")

        def iReset():
            ID.set("")
            Question.set("")
            Difficulty.set("")
            Marks.set("")
            question2.set("")
            var1.set("")
            return 

        def iDates(evt):
            values = str(self.cboDifficulty.get())
            Difficulty = values
            if Difficulty == "Easy":
                Marks.set("10")
            elif Difficulty == "Medium":
                Marks.set("15")
            elif Difficulty == "Hard":
                Marks.set("20")

        def reset():
            for i in range(0,2):
                winsound.Beep(4000,100)
            jReset = tkinter.messagebox.askyesno("Question paper generator","Confirm, Do you want to delete display questions?")
            if jReset>0:
                iReset()
                self.txtOutput.delete("1.0",END)
                self.txtOutput.insert(END,"ID\t\t Question\t\t\t\t\t\t\t\t\t\t\t\t\t Difficulty\t\t Marks\t\t Total Marks\t\n")
            elif jReset<=0:
                iReset()

            
                

        def Ref_no():
            Input_Ref = StringVar()
            x = random.randint(10709,77777)
            randomRef = str(x)
            Input_Ref.set(randomRef)
            ID.set(randomRef)

        def Enter():
            Ref_no()
            self.txtOutput.insert(END,ID.get()+"\t\t" +Question.get()+"\t\t\t\t\t\t\t\t\t\t\t\t\t" +Difficulty.get()+"\t\t" +Marks.get()+"\t\n")
            

#Defined mainframe ##########################
        Mainframe = Frame(self.root, bg = "Skyblue")
        Mainframe.grid()

        Tops = Frame(Mainframe, bd = 10, relief = RIDGE)
        Tops.pack(side = TOP)

        self.lblTitle = Label(Tops, width = 30, font = ('arial', 40, 'bold'), text = "Question paper generator", justify = CENTER)
        self.lblTitle.grid(padx = 150)

#Defined main label ###############################
        Input = LabelFrame(Mainframe, bd=10,bg = '#A8ABD1',width = 1000, height = 200, font = ('arial',12,'bold'),text = 'Fill the details', relief=GROOVE,)
        Input.pack(padx=38, side = TOP)

        Input2 = LabelFrame(Mainframe, bd=10, bg = '#A8ABD1',width = 1300, height = 100, font = ('arial',12,'bold'),text = 'Enter the question', relief = RIDGE)
        Input2.pack(padx=38, side = TOP)

        Output = LabelFrame(Mainframe, bd=19, bg = '#A8ABD1', width = 1300, height = 300, font = ('arial',12,'bold'), text = 'Questions', relief = RIDGE)
        Output.pack(padx=38, side = TOP)

#Defined 1st sub label frame(Input) ################################
        self.lblID = Label(Input, font = ('arial',16,'bold'), text = "ID", bd = 7)
        self.lblID.grid(row = 0, column = 1, sticky = W)
        self.txtID = Entry(Input, font = ('arial',13, 'bold'), textvariable = ID, bd=7, insertwidth = 2, width = 27)
        self.txtID.grid(row=0, column=2)

        self.lblDifficulty = Label(Input, font = ('arial',16,'bold'), text = "Difficulty", bd = 7)
        self.lblDifficulty.grid(row = 0, column = 3, sticky = W)
        self.cboDifficulty = ttk.Combobox(Input, textvariable = Difficulty, state = "readonly", font = ('arial',13,'bold'), width = 27)
        self.cboDifficulty.bind("<<ComboboxSelected>>",iDates)
        self.cboDifficulty['value'] = ("","Easy","Medium","Hard")
        self.cboDifficulty.current(0)
        self.cboDifficulty.grid(row=0, column = 4)

        self.lblMarks = Label(Input, font = ('arial',16,'bold'), text = "Marks", bd = 7)
        self.lblMarks.grid(row = 0, column = 5, sticky = W)
        self.txtMarks = Entry(Input, font = ('arial',13, 'bold'), textvariable = Marks,bd=7, insertwidth = 2, width = 27)
        self.txtMarks.grid(row=0, column=6)

        self.lblDate = Label(Input, font = ('arial',16, 'bold'), text = "Date", bd = 7)
        self.lblDate.grid(row = 2, column = 7)
        self.txtDate = Entry(Input, font = ('arial',13,'bold'), textvariable = iDate, bd = 7, insertwidth = 2)
        self.txtDate.grid(row = 2, column = 8)

#Defined 2nd sub label frame(Input2) ###########
        self.txtQuestion = Entry(Input2, font = ('arial',13, 'bold'), textvariable = Question, bd=5, width = 140, justify = LEFT)
        self.txtQuestion.grid(row=1, column=4)

#Defined 3rd sub label frame(Output) ###########
        self.txtOutput = Text(Output, width = 210, height = 20, font = ('Times new roman',10))
        self.txtOutput.grid(row=0, column=0, columnspan=4)
        self.txtOutput.insert(END,"ID\t\t Question\t\t\t\t\t\t\t\t\t\t\t\t\t Difficulty\t\t Marks\t\n")

#Defined button #####################################
        self.btnEnter = Button(Output, bd=7, font = ('arial',16,'bold'),width=13, text = "Enter",command = Enter).grid(row=1, column=0, pady=12)
        self.btnReset = Button(Output, bd=7, font = ('arial',16,'bold'),width=13, text = "Reset",command = reset).grid(row=1, column=1, pady=12)
        self.btnPrint = Button(Output, bd=7, font = ('arial',16,'bold'),width=13, text = "Print",command = iPrint).grid(row=1, column=2, pady=12)
        self.btnExit = Button(Output, bd=7, font = ('arial',16,'bold'),width=13, text = "Exit",command = iExit).grid(row=1, column=3, pady=12)
        
        
        
if __name__ == '__main__':
    root = Tk()
    application = Questions(root)
    root.mainloop()
